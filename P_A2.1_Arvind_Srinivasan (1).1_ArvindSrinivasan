{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "189afd80",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "906b20c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use a raw string to avoid unicode escape issues\n",
    "csv_file_path = r\"D:\\SCMA632\\Stats\\Assignment\\A2\\NSSO68.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4f3fdf4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c9fa2e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset with low_memory=False\n",
    "data = pd.read_csv(csv_file_path, low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f3696500",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   slno       grp  Round_Centre  FSU_number  Round  Schedule_Number  Sample  \\\n",
      "0     1  4.10E+31             1       41000     68               10       1   \n",
      "1     2  4.10E+31             1       41000     68               10       1   \n",
      "2     3  4.10E+31             1       41000     68               10       1   \n",
      "3     4  4.10E+31             1       41000     68               10       1   \n",
      "4     5  4.10E+31             1       41000     68               10       1   \n",
      "\n",
      "   Sector  state  State_Region  ...  pickle_v  sauce_jam_v  Othrprocessed_v  \\\n",
      "0       2     24           242  ...       0.0          0.0              0.0   \n",
      "1       2     24           242  ...       0.0          0.0              0.0   \n",
      "2       2     24           242  ...       0.0          0.0              0.0   \n",
      "3       2     24           242  ...       0.0          0.0              0.0   \n",
      "4       2     24           242  ...       0.0          0.0              0.0   \n",
      "\n",
      "   Beveragestotal_v  foodtotal_v  foodtotal_q  state_1  Region  \\\n",
      "0          0.000000  1141.492400    30.942394      GUJ       2   \n",
      "1         17.500000  1244.553500    29.286153      GUJ       2   \n",
      "2          0.000000  1050.315400    31.527046      GUJ       2   \n",
      "3         33.333333  1142.591667    27.834607      GUJ       2   \n",
      "4         75.000000   945.249500    27.600713      GUJ       2   \n",
      "\n",
      "   fruits_df_tt_v  fv_tot  \n",
      "0       12.000000  154.18  \n",
      "1      333.000000  484.95  \n",
      "2       35.000000  214.84  \n",
      "3      168.333333  302.30  \n",
      "4       15.000000  148.00  \n",
      "\n",
      "[5 rows x 384 columns]\n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows of the dataset\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "977ff25d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['slno', 'grp', 'Round_Centre', 'FSU_number', 'Round', 'Schedule_Number', 'Sample', 'Sector', 'state', 'State_Region', 'District', 'Stratum_Number', 'Sub_Stratum', 'Schedule_type', 'Sub_Round', 'Sub_Sample', 'FOD_Sub_Region', 'Hamlet_Group_Sub_Block', 't', 'X_Stage_Stratum', 'HHS_No', 'Level', 'Filler', 'hhdsz', 'NIC_2008', 'NCO_2004', 'HH_type', 'Religion', 'Social_Group', 'Whether_owns_any_land', 'Type_of_land_owned', 'Land_Owned', 'Land_Leased_in', 'Otherwise_possessed', 'Land_Leased_out', 'Land_Total_possessed', 'During_July_June_Cultivated', 'During_July_June_Irrigated', 'NSS', 'NSC', 'MLT', 'land_tt', 'Cooking_code', 'Lighting_code', 'Dwelling_unit_code', 'Regular_salary_earner', 'Perform_Ceremony', 'Meals_seved_to_non_hhld_members', 'Possess_ration_card', 'Type_of_ration_card', 'MPCE_URP', 'MPCE_MRP', 'Person_Srl_No', 'Relation', 'Sex', 'Age', 'Marital_Status', 'Education', 'Days_Stayed_away', 'No_of_Meals_per_day', 'Meals_School', 'Meals_Employer', 'Meals_Others', 'Meals_Payment', 'Meals_At_Home', 'Item_Code', 'Source_Code', 'ricepds_q', 'riceos_q', 'ricetotal_q', 'chira_q', 'khoi_q', 'muri_q', 'ricepro_q', 'riceGT_q', 'Wheatpds_q', 'wheatos_q', 'wheattotal_q', 'maida_q', 'suji_q', 'sewai_q', 'bread_q', 'wheatp_q', 'wheatGT_q', 'jowarp_q', 'bajrap_q', 'maizep_q', 'barleyp_q', 'milletp_q', 'ragip_q', 'cerealot_q', 'cerealtot_q', 'cerealsub_q', 'cerealstt_q', 'arhar_q', 'gramdal_q', 'gramwholep_q', 'gramGT_q', 'moong_q', 'masur_q', 'urd_q', 'peasdal_q', 'khesari_q', 'otpulse_q', 'gramp_q', 'besan_q', 'pulsep_q', 'pulsestot_q', 'pulsestt_q', 'soyabean_q', 'milk_q', 'babyfood_q', 'milkcond_q', 'curd_q', 'ghee_q', 'butter_q', 'icecream_q', 'otmilkp_q', 'Milktotal_q', 'milkprott_q', 'vanas_q', 'musoil_q', 'gnoil_q', 'cocooil_q', 'edioilothr_q', 'edibletotal_q', 'ediblest_q', 'eggsno_q', 'fishprawn_q', 'goatmeat_q', 'beef_q', 'pork_q', 'chicken_q', 'othrbirds_q', 'nonvegtotal_q', 'emftt_q', 'potato_q', 'onion_q', 'tamato_q', 'brinjal_q', 'radish_q', 'carrot_q', 'palak_q', 'chillig_q', 'bhindi_q', 'parwal_q', 'cauli_q', 'cabbage_q', 'pumpkin_q', 'peas_q', 'fbeans_q', 'lemonno_q', 'otveg_q', 'vegtt_q', 'bananano_q', 'jackfruit_q', 'watermel_q', 'pineaplno_q', 'cocono_q', 'cocogno_q', 'guava_q', 'sighara_q', 'orangeno_q', 'papayar_q', 'mango_q', 'kharbooz_q', 'pears_q', 'berries_q', 'leechi_q', 'apple_q', 'grapes_q', 'otfruits_q', 'fruitstt_q', 'fruitt_total', 'cocodf_q', 'gnutdf_q', 'datesdf_q', 'cashewdf_q', 'walnutdf_q', 'otnutsdf_q', 'kishmish_q', 'otherdf_q', 'dryfruitstotal_q', 'dftt_q', 'sugarpds_q', 'sugaros_q', 'sugarst_q', 'gur_q', 'misri_q', 'honey_q', 'sugartotal_q', 'sugartt_q', 'salt_q', 'ginger_q', 'garlic_q', 'jeera_q', 'dhania_q', 'turnmeric_q', 'blackpepper_q', 'drychilly_q', 'tamarind_q', 'currypowder_q', 'oilseeds_q', 'spicesothr_q', 'spicetot_q', 'spicestotal_q', 'teacupno_q', 'tealeaf_q', 'teatotal_q', 'cofeeno_q', 'coffeepwdr_q', 'cofeetotal_q', 'ice_q', 'coldbvrg_q', 'juice_q', 'othrbevrg_q', 'bevergest_q', 'Biscuits_q', 'preparedsweet_q', 'pickle_q', 'sauce_jam_q', 'Othrprocessed_q', 'Beveragestotal_q', 'ricepds_v', 'riceos_v', 'ricetotal_v', 'chira_v', 'khoi_v', 'muri_v', 'ricepro_v', 'riceGT_v', 'Wheatpds_v', 'wheatos_v', 'wheattotal_v', 'maida_v', 'suji_v', 'sewai_v', 'bread_v', 'wheatp_v', 'wheatGT_v', 'jowarp_v', 'bajrap_v', 'maizep_v', 'barleyp_v', 'milletp_v', 'ragip_v', 'cerealot_v', 'cerealtot_v', 'cerealsub_v', 'cerealstt_v', 'arhar_v', 'gramdal_v', 'gramwholep_v', 'gramGT_v', 'moong_v', 'masur_v', 'urd_v', 'peasdal_v', 'khesari_v', 'otpulse_v', 'gramp_v', 'besan_v', 'pulsep_v', 'pulsestot_v', 'pulsestt_v', 'soyabean_v', 'milk_v', 'babyfood_v', 'milkcond_v', 'curd_v', 'ghee_v', 'butter_v', 'icecream_v', 'otmilkp_v', 'Milktotal_v', 'milkprott_v', 'vanas_v', 'musoil_v', 'gnoil_v', 'cocooil_v', 'edioilothr_v', 'edibletotal_v', 'ediblest_v', 'eggsno_v', 'fishprawn_v', 'goatmeat_v', 'beef_v', 'pork_v', 'chicken_v', 'othrbirds_v', 'nonvegtotal_v', 'emftt_v', 'potato_v', 'onion_v', 'tamato_v', 'brinjal_v', 'radish_v', 'carrot_v', 'palak_v', 'chillig_v', 'bhindi_v', 'parwal_v', 'cauli_v', 'cabbage_v', 'pumpkin_v', 'peas_v', 'fbeans_v', 'lemonno_v', 'otveg_v', 'vegtt_v', 'bananano_v', 'jackfruit_v', 'watermel_v', 'pineaplno_v', 'cocono_v', 'cocogno_v', 'guava_v', 'sighara_v', 'orangeno_v', 'papayar_v', 'mango_v', 'kharbooz_v', 'pears_v', 'berries_v', 'leechi_v', 'apple_v', 'grapes_v', 'otfruits_v', 'fruitstt_v', 'cocodf_v', 'gnutdf_v', 'datesdf_v', 'cashewdf_v', 'walnutdf_v', 'otnutsdf_v', 'kishmish_v', 'otherdf_v', 'dryfruitstotal_v', 'dftt_v', 'sugarpds_v', 'sugaros_v', 'sugarst_v', 'gur_v', 'misri_v', 'honey_v', 'sugartotal_v', 'sugartt_v', 'salt_v', 'ginger_v', 'garlic_v', 'jeera_v', 'dhania_v', 'turnmeric_v', 'blackpepper_v', 'drychilly_v', 'tamarind_v', 'currypowder_v', 'oilseeds_v', 'spicesothr_v', 'spicetot_v', 'spicestotal_v', 'teacupno_v', 'tealeaf_v', 'teatotal_v', 'cofeeno_v', 'coffeepwdr_v', 'cofeetotal_v', 'ice_v', 'coldbvrg_v', 'juice_v', 'othrbevrg_v', 'bevergest_v', 'Biscuits_v', 'preparedsweet_v', 'pickle_v', 'sauce_jam_v', 'Othrprocessed_v', 'Beveragestotal_v', 'foodtotal_v', 'foodtotal_q', 'state_1', 'Region', 'fruits_df_tt_v', 'fv_tot']\n"
     ]
    }
   ],
   "source": [
    "# Load only the first row of the dataset to inspect column names\n",
    "data = pd.read_csv(csv_file_path, nrows=0)\n",
    "\n",
    "# Display the column names\n",
    "print(data.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ed30faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the columns to be loaded\n",
    "selected_columns = ['state_1', 'foodtotal_v', 'foodtotal_q', 'MPCE_URP', 'MPCE_MRP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1873f915",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset with only the selected columns\n",
    "data = pd.read_csv(csv_file_path, usecols=selected_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "84830579",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   MPCE_URP  MPCE_MRP  foodtotal_v  foodtotal_q state_1\n",
      "0   3304.80   3662.65  1141.492400    30.942394     GUJ\n",
      "1   7613.00   5624.51  1244.553500    29.286153     GUJ\n",
      "2   3461.40   3657.18  1050.315400    31.527046     GUJ\n",
      "3   3339.00   3260.37  1142.591667    27.834607     GUJ\n",
      "4   2604.25   2627.54   945.249500    27.600713     GUJ\n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows of the selected columns\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "32044254",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MPCE_URP       0\n",
      "MPCE_MRP       0\n",
      "foodtotal_v    0\n",
      "foodtotal_q    0\n",
      "state_1        0\n",
      "dtype: int64\n",
      "MPCE_URP       float64\n",
      "MPCE_MRP       float64\n",
      "foodtotal_v    float64\n",
      "foodtotal_q    float64\n",
      "state_1         object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Checking for missing values and data types\n",
    "print(data.isnull().sum())\n",
    "print(data.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "674de961",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming 'foodtotal_v' is the dependent variable and others are independent\n",
    "X = data[['foodtotal_q', 'MPCE_URP', 'MPCE_MRP']]\n",
    "y = data['foodtotal_v']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8a4d3ad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add a constant to the model (intercept)\n",
    "import statsmodels.api as sm\n",
    "X = sm.add_constant(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3efab0e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:            foodtotal_v   R-squared:                       0.726\n",
      "Model:                            OLS   Adj. R-squared:                  0.726\n",
      "Method:                 Least Squares   F-statistic:                 8.976e+04\n",
      "Date:                Sun, 23 Jun 2024   Prob (F-statistic):               0.00\n",
      "Time:                        18:51:45   Log-Likelihood:            -6.7896e+05\n",
      "No. Observations:              101662   AIC:                         1.358e+06\n",
      "Df Residuals:                  101658   BIC:                         1.358e+06\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const         -93.7753      1.601    -58.590      0.000     -96.912     -90.638\n",
      "foodtotal_q    24.5783      0.065    379.879      0.000      24.451      24.705\n",
      "MPCE_URP       -0.0012      0.000     -6.999      0.000      -0.002      -0.001\n",
      "MPCE_MRP        0.0617      0.000    170.368      0.000       0.061       0.062\n",
      "==============================================================================\n",
      "Omnibus:                   224564.241   Durbin-Watson:                   1.333\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):      22629125703.332\n",
      "Skew:                          19.192   Prob(JB):                         0.00\n",
      "Kurtosis:                    2314.002   Cond. No.                     1.37e+04\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.37e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "# Fit the multiple regression model\n",
    "model = sm.OLS(y, X).fit()\n",
    "\n",
    "# Print the summary of the regression\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ffb3d553",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        VIF     Variable\n",
      "0  7.033160        const\n",
      "1  1.141030  foodtotal_q\n",
      "2  1.459135     MPCE_URP\n",
      "3  1.600578     MPCE_MRP\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Calculate VIF for each independent variable\n",
    "vif = pd.DataFrame()\n",
    "vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
    "vif['Variable'] = X.columns\n",
    "\n",
    "print(vif)\n",
    "\n",
    "#VIF value of more than 8 is problematic "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8754867c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:        log_foodtotal_v   R-squared:                       0.434\n",
      "Model:                            OLS   Adj. R-squared:                  0.434\n",
      "Method:                 Least Squares   F-statistic:                 2.594e+04\n",
      "Date:                Sun, 23 Jun 2024   Prob (F-statistic):               0.00\n",
      "Time:                        18:52:07   Log-Likelihood:                -83542.\n",
      "No. Observations:              101662   AIC:                         1.671e+05\n",
      "Df Residuals:                  101658   BIC:                         1.671e+05\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const           5.1052      0.005   1115.224      0.000       5.096       5.114\n",
      "foodtotal_q     0.0463      0.000    250.438      0.000       0.046       0.047\n",
      "MPCE_URP    -9.016e-07   4.96e-07     -1.819      0.069   -1.87e-06    7.01e-08\n",
      "MPCE_MRP     2.462e-05   1.04e-06     23.762      0.000    2.26e-05    2.66e-05\n",
      "==============================================================================\n",
      "Omnibus:                   121758.946   Durbin-Watson:                   1.452\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         20845832.811\n",
      "Skew:                          -6.343   Prob(JB):                         0.00\n",
      "Kurtosis:                      71.995   Cond. No.                     1.37e+04\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.37e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Log-transform the dependent variable\n",
    "data['log_foodtotal_v'] = np.log(data['foodtotal_v'] + 1)  # Adding 1 to avoid log(0)\n",
    "\n",
    "# Redefine dependent and independent variables\n",
    "y_log = data['log_foodtotal_v']\n",
    "X = data[['foodtotal_q', 'MPCE_URP', 'MPCE_MRP']]\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit the model again with log-transformed dependent variable\n",
    "model_log = sm.OLS(y_log, X).fit()\n",
    "\n",
    "# Print the summary of the new regression\n",
    "print(model_log.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b6d0825b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the coefficients for the original model\n",
    "coefficients = model.params\n",
    "intercept = coefficients['const']\n",
    "coef_foodtotal_q = coefficients['foodtotal_q']\n",
    "coef_MPCE_URP = coefficients['MPCE_URP']\n",
    "coef_MPCE_MRP = coefficients['MPCE_MRP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0944edff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regression Equation for original model: foodtotal_v = -93.7753 + 24.5783 * foodtotal_q + -0.0012 * MPCE_URP + 0.0617 * MPCE_MRP\n"
     ]
    }
   ],
   "source": [
    "# Create the regression equation for the original model\n",
    "regression_equation = f\"foodtotal_v = {intercept:.4f} + {coef_foodtotal_q:.4f} * foodtotal_q + {coef_MPCE_URP:.4f} * MPCE_URP + {coef_MPCE_MRP:.4f} * MPCE_MRP\"\n",
    "print(\"Regression Equation for original model:\", regression_equation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "65513bcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First few error terms (residuals) for the original model: 0    252.741716\n",
      "1    280.668984\n",
      "2    147.722528\n",
      "3    355.091502\n",
      "4    201.659116\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculate the fitted values for the original model\n",
    "fitted_values = model.predict(X)\n",
    "# Calculate the error term (residuals) for the original model\n",
    "error_term = data['foodtotal_v'] - fitted_values\n",
    "# Display the first few error terms for the original model\n",
    "print(\"First few error terms (residuals) for the original model:\", error_term.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fdd6eb93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the coefficients for the log-transformed model\n",
    "coefficients_log = model_log.params\n",
    "intercept_log = coefficients_log['const']\n",
    "coef_foodtotal_q_log = coefficients_log['foodtotal_q']\n",
    "coef_MPCE_URP_log = coefficients_log['MPCE_URP']\n",
    "coef_MPCE_MRP_log = coefficients_log['MPCE_MRP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ab80ff95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regression Equation for log-transformed model: log_foodtotal_v = 5.1052 + 0.0463 * foodtotal_q + -0.0000 * MPCE_URP + 0.0000 * MPCE_MRP\n"
     ]
    }
   ],
   "source": [
    "# Create the regression equation for the log-transformed model\n",
    "regression_equation_log = f\"log_foodtotal_v = {intercept_log:.4f} + {coef_foodtotal_q_log:.4f} * foodtotal_q + {coef_MPCE_URP_log:.4f} * MPCE_URP + {coef_MPCE_MRP_log:.4f} * MPCE_MRP\"\n",
    "print(\"Regression Equation for log-transformed model:\", regression_equation_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "88889298",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the fitted values for the log-transformed model\n",
    "fitted_values_log = model_log.predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "afae9541",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Calculate the fitted values for the log-transformed model\n",
    "fitted_values_log = model_log.predict(X)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b4dd0382",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First few error terms (residuals) for the log-transformed model: 0    0.414526\n",
      "1    0.533238\n",
      "2    0.304536\n",
      "3    0.569450\n",
      "4    0.405784\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculate the error term (residuals) for the log-transformed model\n",
    "error_term_log = data['log_foodtotal_v'] - fitted_values_log\n",
    "# Display the first few error terms for the log-transformed model\n",
    "print(\"First few error terms (residuals) for the log-transformed model:\", error_term_log.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5dde8576",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
